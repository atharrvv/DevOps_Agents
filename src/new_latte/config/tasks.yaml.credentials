analyze_and_generate_files:
  description: >
    ACTUALLY analyze the Python repository: {github_repo_url} repository ONLY to detect:
    1. Python version (from requirements.txt, pyproject.toml, or runtime.txt)
    2. Python dependencies (requirements.txt, setup.py, pyproject.toml)
    3. Python test framework (pytest, unittest, nose)
    4. Python deployment (Flask, Django, FastAPI, or simple Python app)
    IMPORTANT:
      - This is a PYTHON project. Do NOT mention npm, node, java, or other languages.
      - Default to Python 3.9 if no version is specified in the repository.
    Only use Python tools: pip, pytest, python, pylint, etc.
  agent: repository_analyzer
  expected_output: >
    Python-specific analysis (100 words max):
    - Python Version: [detected version]
    - Dependencies: [pip install from requirements.txt/setup.py]
    - Tests: [pytest/unittest command]
    - App Type: [Flask/Django/FastAPI/CLI app]

generate_optimized_workflows:
  description: >
    Create 3 optimized GitHub Actions workflows for PYTHON projects ONLY:
    1. test.yml - Set up Python, install dependencies including pytest, run tests
    2. build.yml - Install Python dependencies, archive .py or source files, and upload artifacts
    3. deploy.yml - Deploy Python app (Flask/Django/FastAPI) to EC2 using the provided connection details
    
    IMPORTANT: Use the following EC2 connection details in deploy.yml:
    - Host: {ec2_host}
    - Username: {ec2_username}
    - SSH Key: {ec2_ssh_key}
    
    Required conventions:
    - Always use actions/checkout@v4
    - Always use actions/setup-python@v4
    - Always use actions/upload-artifact@v4 (✅ latest version)
    - Install Python dependencies with `pip install -r requirements.txt` (check existence)
    - Always install pytest manually: `pip install pytest`
    - Use `python -m pytest` to run tests
    - For build:
        - If `pyproject.tml` exists: use `pip install build && python -m build`
        - If only `setup.py` exists: use `pip install wheel && python setup.py sdist bdist_wheel`
        - Always upload the `dist/` directory using actions/upload-artifact@v4
    - For EC2 deployment:
        - Use appleboy/ssh-action@v1.1.0 for SSH connection
        - Use the provided EC2 connection details: host={ec2_host}, username={ec2_username}, key={ec2_ssh_key}
        - Git pull latest code on EC2
        - Install/update Python dependencies with pip
        - Restart gunicorn/systemd service
        - Reload nginx if needed
        - Support Flask, Django, FastAPI deployment patterns
    ❌ DO NOT:
    - Use actions/upload-artifact@v3 (deprecated)
    - Use archive-workflow-job (non-existent)
    - Include placeholder files like `yourapplication.py`
  agent: workflow_creator
  depends_on: [analyze_and_generate_files]
  expected_output: >
    3 Python GitHub Actions workflows:
    1. test.yml (20-30 lines): Validates dependencies, installs pytest, runs tests
    2. build.yml (20-30 lines): Archives code using zip and uploads via upload-artifact@v4
    3. deploy.yml (30-40 lines): Deploys Python app to EC2 using SSH with the provided connection details:
       - host: {ec2_host}
       - username: {ec2_username}
       - key: {ec2_ssh_key}
    All workflows must:
    - Be 100% Python specific
    - Be valid for GitHub Actions
    - Include EC2 deployment with proper service restart
    - Handle Python virtual environments on EC2
    - Support multiple Python web frameworks
    - Avoid deprecated actions or broken versions
    - Include practical and reusable steps
    - Use the provided EC2 connection details in the deploy.yml workflow
