analyze_and_generate_files:
  description: >
    Analyze PYTHON repository ONLY to detect:
    1. Python version (from requirements.txt, pyproject.toml, or runtime.txt)
    2. Python dependencies (requirements.txt, setup.py, pyproject.toml)
    3. Python test framework (pytest, unittest, nose)
    4. Python deployment (Flask, Django, FastAPI, or simple Python app)
    
    IMPORTANT: This is a PYTHON project. Do NOT mention npm, node, java, or other languages.
    Only use Python tools: pip, pytest, python, pylint, etc.
  agent: repository_analyzer
  expected_output: >
    Python-specific analysis (100 words max):
    - Python Version: [detected version]
    - Dependencies: [pip install from requirements.txt/setup.py]
    - Tests: [pytest/unittest command]
    - App Type: [Flask/Django/FastAPI/CLI app]

generate_optimized_workflows:
  description: >
    Create 3 simple GitHub Actions workflows for PYTHON projects ONLY:
    1. test.yml - Run Python tests using pytest/unittest
    2. build.yml - Install Python dependencies and create artifacts
    3. deploy.yml - Deploy Python app (Flask/Django/FastAPI)
    
    CRITICAL: Use ONLY Python commands:
    - pip install -r requirements.txt
    - python -m pytest
    - python app.py
    - pylint or flake8 for linting
    
    DO NOT use npm, node, java, or any non-Python tools.
    Keep workflows Python-specific and simple.
  agent: workflow_creator
  depends_on: [analyze_and_generate_files]
  expected_output: >
    3 Python-specific workflow files:
    1. test.yml (15-25 lines) - Uses pip and pytest
    2. build.yml (15-25 lines) - Uses pip and Python
    3. deploy.yml (15-25 lines) - Python deployment
    Each with complete, working YAML content for Python projects.
