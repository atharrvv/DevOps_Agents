```yaml
name: Test and Build
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      # Step: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Step: Cache Python packages
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}

      # Step: Install dependencies
      - name: Install dependencies
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          elif [ -f "pyproject.toml" ]; then
            pip install poetry
            poetry install --no-root
          elif [ -f "Pipfile" ]; then
            pip install pipenv
            pipenv install --dev
          else
            echo "No dependency file found. Skipping dependency installation."
            exit 0
          fi

      # Step: Run tests
      - name: Run tests
        if: ${{ files.exists('tests/') }}
        run: |
          if [ -f "pytest.ini" ] || [ -f "pyproject.toml" ] || [ -f "setup.cfg" ]; then
            python -m pytest --cov || python -m pytest
          else
            python -m pytest
        shell: bash
      
      # Conditional step: Comment if no tests directory exists
      - name: Skip tests (No tests/ directory found)
        if: ${{ !files.exists('tests/') }}
        run: echo "No 'tests/' directory found. Skipping tests."
  
  build:
    name: Build application
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Step: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step: Set up Python
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Step: Cache Python packages
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip

      # Step: Install dependencies for build
      - name: Install build dependencies
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "pyproject.toml" ]; then
            pip install --upgrade build
            pip install poetry
            poetry install --no-root
          elif [ -f "setup.py" ] || [ -f "setup.cfg" ]; then
            pip install --upgrade build
          else
            echo "No build configuration found. Skipping build."
            exit 0

      # Step: Build the package
      - name: Build package
        run: |
          if [ -f "pyproject.toml" ]; then
            python -m build
          elif [ -f "setup.py" ] || [ -f "setup.cfg" ]; then
            python -m build
          else
            echo "No build configuration found. Skipping build."
            exit 0

      # Step: Upload built artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      # Step: Verify installation of built package
      - name: Verify package installation
        run: |
          python -m pip install dist/*.whl || python -m pip install dist/*.tar.gz

      # Conditional step: Comment if no build configuration exists
      - name: Skip build (No build configuration found)
        if: ${{ !files.exists('pyproject.toml') && !files.exists('setup.py') && !files.exists('setup.cfg') }}
        run: echo "No build configuration found. Build step was skipped."
```